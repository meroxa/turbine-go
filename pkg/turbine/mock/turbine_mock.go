// Code generated by MockGen. DO NOT EDIT.
// Source: turbine.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/meroxa/turbine-go/pkg/proto/core"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MockTurbineCore is a mock of TurbineCore interface.
type MockTurbineCore struct {
	ctrl     *gomock.Controller
	recorder *MockTurbineCoreMockRecorder
}

// MockTurbineCoreMockRecorder is the mock recorder for MockTurbineCore.
type MockTurbineCoreMockRecorder struct {
	mock *MockTurbineCore
}

// NewMockTurbineCore creates a new mock instance.
func NewMockTurbineCore(ctrl *gomock.Controller) *MockTurbineCore {
	mock := &MockTurbineCore{ctrl: ctrl}
	mock.recorder = &MockTurbineCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTurbineCore) EXPECT() *MockTurbineCoreMockRecorder {
	return m.recorder
}

// AddProcessToCollection mocks base method.
func (m *MockTurbineCore) AddProcessToCollection(ctx context.Context, in *core.ProcessCollectionRequest, opts ...grpc.CallOption) (*core.Collection, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProcessToCollection", varargs...)
	ret0, _ := ret[0].(*core.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProcessToCollection indicates an expected call of AddProcessToCollection.
func (mr *MockTurbineCoreMockRecorder) AddProcessToCollection(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessToCollection", reflect.TypeOf((*MockTurbineCore)(nil).AddProcessToCollection), varargs...)
}

// GetResource mocks base method.
func (m *MockTurbineCore) GetResource(ctx context.Context, in *core.GetResourceRequest, opts ...grpc.CallOption) (*core.Resource, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResource", varargs...)
	ret0, _ := ret[0].(*core.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockTurbineCoreMockRecorder) GetResource(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockTurbineCore)(nil).GetResource), varargs...)
}

// GetSpec mocks base method.
func (m *MockTurbineCore) GetSpec(ctx context.Context, in *core.GetSpecRequest, opts ...grpc.CallOption) (*core.GetSpecResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpec", varargs...)
	ret0, _ := ret[0].(*core.GetSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpec indicates an expected call of GetSpec.
func (mr *MockTurbineCoreMockRecorder) GetSpec(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpec", reflect.TypeOf((*MockTurbineCore)(nil).GetSpec), varargs...)
}

// HasFunctions mocks base method.
func (m *MockTurbineCore) HasFunctions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasFunctions", varargs...)
	ret0, _ := ret[0].(*wrapperspb.BoolValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasFunctions indicates an expected call of HasFunctions.
func (mr *MockTurbineCoreMockRecorder) HasFunctions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFunctions", reflect.TypeOf((*MockTurbineCore)(nil).HasFunctions), varargs...)
}

// Init mocks base method.
func (m *MockTurbineCore) Init(ctx context.Context, in *core.InitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Init", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockTurbineCoreMockRecorder) Init(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTurbineCore)(nil).Init), varargs...)
}

// ListResources mocks base method.
func (m *MockTurbineCore) ListResources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*core.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResources", varargs...)
	ret0, _ := ret[0].(*core.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockTurbineCoreMockRecorder) ListResources(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockTurbineCore)(nil).ListResources), varargs...)
}

// ReadCollection mocks base method.
func (m *MockTurbineCore) ReadCollection(ctx context.Context, in *core.ReadCollectionRequest, opts ...grpc.CallOption) (*core.Collection, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadCollection", varargs...)
	ret0, _ := ret[0].(*core.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCollection indicates an expected call of ReadCollection.
func (mr *MockTurbineCoreMockRecorder) ReadCollection(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCollection", reflect.TypeOf((*MockTurbineCore)(nil).ReadCollection), varargs...)
}

// RegisterSecret mocks base method.
func (m *MockTurbineCore) RegisterSecret(ctx context.Context, in *core.Secret, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterSecret", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSecret indicates an expected call of RegisterSecret.
func (mr *MockTurbineCoreMockRecorder) RegisterSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSecret", reflect.TypeOf((*MockTurbineCore)(nil).RegisterSecret), varargs...)
}

// WriteCollectionToResource mocks base method.
func (m *MockTurbineCore) WriteCollectionToResource(ctx context.Context, in *core.WriteCollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteCollectionToResource", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteCollectionToResource indicates an expected call of WriteCollectionToResource.
func (mr *MockTurbineCoreMockRecorder) WriteCollectionToResource(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCollectionToResource", reflect.TypeOf((*MockTurbineCore)(nil).WriteCollectionToResource), varargs...)
}
